diff --git a/node_modules/hyperdht/index.js b/node_modules/hyperdht/index.js
index b986340..1532338 100644
--- a/node_modules/hyperdht/index.js
+++ b/node_modules/hyperdht/index.js
@@ -18,7 +18,7 @@ const { STREAM_NOT_CONNECTED } = require('./lib/errors')
 const { createTracer } = require('hypertrace')
 
 class HyperDHT extends DHT {
-  constructor (opts = {}) {
+  constructor (opts, sig, dht_keys, keychain = {}) {
     const port = opts.port || 49737
     const bootstrap = opts.bootstrap || BOOTSTRAP_NODES
 
@@ -26,7 +26,11 @@ class HyperDHT extends DHT {
 
     const { router, persistent } = defaultCacheOpts(opts)
 
-    this.defaultKeyPair = opts.keyPair || createKeyPair(opts.seed)
+    this.checkedSigs = [sig]
+    this.sig = sig
+    this.keychain = keychain
+    this.dht_keys = dht_keys
+    this.defaultKeyPair = dht_keys || createKeyPair(opts.seed)
     this.listening = new Set()
     this.tracer = createTracer(this)
     this.connectionKeepAlive = opts.connectionKeepAlive || 0
@@ -67,9 +71,9 @@ class HyperDHT extends DHT {
   }
 
   createServer (opts, onconnection) {
-    if (typeof opts === 'function') return this.createServer({}, opts)
+    if (typeof opts === 'function') return this.createServer(this.sig, {}, opts)
     if (opts && opts.onconnection) onconnection = opts.onconnection
-    const s = new Server(this, opts)
+    const s = new Server(this.sig, this, opts)
     if (onconnection) s.on('connection', onconnection)
     return s
   }
diff --git a/node_modules/hyperdht/lib/connect.js b/node_modules/hyperdht/lib/connect.js
index 0f140ef..cdee70a 100644
--- a/node_modules/hyperdht/lib/connect.js
+++ b/node_modules/hyperdht/lib/connect.js
@@ -73,7 +73,7 @@ module.exports = function connect (dht, publicKey, opts = {}) {
     onsocket: null,
     sleeper: new Sleeper(),
     encryptedSocket,
-
+    sig: dht.sig,
     // Relay state
     relayTimeout: null,
     relayThrough,
@@ -169,7 +169,6 @@ async function retryRoute (c, route) {
 
 async function connectAndHolepunch (c, opts) {
   const route = c.reusableSocket ? c.dht._socketPool.routes.get(c.remotePublicKey) : null
-
   if (route) {
     await retryRoute(c, route)
     if (isDone(c)) return
@@ -374,7 +373,8 @@ async function connectThroughNode (c, address, socket) {
       secretStream: {},
       relayThrough: c.relayThrough
         ? { publicKey: c.relayThrough, token: c.relayToken }
-        : null
+        : null,
+      mid: c.sig,
     })
     if (isDone(c)) return
   }
@@ -398,8 +398,25 @@ async function connectThroughNode (c, address, socket) {
     return
   }
 
+
   const hs = c.handshake.final()
 
+  //firewall function does not send payload so we must check here for now
+  //Checking if the remotePublickey is signed with our common privatekey
+  let error = false
+  if (!payload.mid) error = true
+  const checked = checkSignature(payload.mid, hs.remotePublicKey, c.dht.keychain)
+  //Check if this id is already used by another active connection
+  if (c.dht.checkedSigs.some(a => payload.mid === a)) error = true
+  if (!checked) error = true
+
+  c.dht.checkedSigs.push(payload.mid)
+  
+  if (error || !checked) {
+      maybeDestroyEncryptedSocket(c, SERVER_ERROR('Verification failed'))
+      return
+  }
+
   c.handshake = null
   c.request = null
   c.requesting = false
@@ -461,7 +478,11 @@ async function connectThroughNode (c, address, socket) {
 
   c.session.destroy()
 }
-
+const checkSignature = (signature, remotePublicKey, keychain) => {
+  const keys = keychain.get()
+  const verify = keys.verify(remotePublicKey, signature, keys.publicKey)
+  return verify ? true : false
+}
 async function updateHolepunch (c, peerAddress, relayAddr, payload) {
   const holepunch = await c.dht._router.peerHolepunch(c.target, {
     id: c.connect.payload.holepunch.id,
diff --git a/node_modules/hyperdht/lib/messages.js b/node_modules/hyperdht/lib/messages.js
index 86d83ee..007731d 100644
--- a/node_modules/hyperdht/lib/messages.js
+++ b/node_modules/hyperdht/lib/messages.js
@@ -155,13 +155,14 @@ const relayThroughInfo = {
 
 exports.noisePayload = {
   preencode (state, m) {
-    state.end += 4 // version + flags + error + firewall
+    state.end += 68 // version + flags + error + firewall + signature
     if (m.holepunch) holepunchInfo.preencode(state, m.holepunch)
     if (m.addresses4 && m.addresses4.length) ipv4Array.preencode(state, m.addresses4)
     if (m.addresses6 && m.addresses6.length) ipv6Array.preencode(state, m.addresses6)
     if (m.udx) udxInfo.preencode(state, m.udx)
     if (m.secretStream) secretStreamInfo.preencode(state, m.secretStream)
     if (m.relayThrough) relayThroughInfo.preencode(state, m.relayThrough)
+      
   },
   encode (state, m) {
     let flags = 0
@@ -184,6 +185,7 @@ exports.noisePayload = {
     if (m.udx) udxInfo.encode(state, m.udx)
     if (m.secretStream) secretStreamInfo.encode(state, m.secretStream)
     if (m.relayThrough) relayThroughInfo.encode(state, m.relayThrough)
+    if (m.mid) c.fixed64.encode(state, m.mid)
   },
   decode (state) {
     const version = c.uint.decode(state)
@@ -200,7 +202,8 @@ exports.noisePayload = {
         addresses6: [],
         udx: null,
         secretStream: null,
-        relayThrough: null
+        relayThrough: null,
+        mid: null
       }
     }
 
@@ -215,7 +218,8 @@ exports.noisePayload = {
       addresses6: (flags & 4) !== 0 ? ipv6Array.decode(state) : [],
       udx: (flags & 8) !== 0 ? udxInfo.decode(state) : null,
       secretStream: (flags & 16) !== 0 ? secretStreamInfo.decode(state) : null,
-      relayThrough: (flags & 32) !== 0 ? relayThroughInfo.decode(state) : null
+      relayThrough: (flags & 32) !== 0 ? relayThroughInfo.decode(state) : null,
+      mid: c.fixed64.decode(state)
     }
   }
 }
diff --git a/node_modules/hyperdht/lib/server.js b/node_modules/hyperdht/lib/server.js
index cc89800..5951b9b 100644
--- a/node_modules/hyperdht/lib/server.js
+++ b/node_modules/hyperdht/lib/server.js
@@ -19,12 +19,13 @@ const HANDSHAKE_CLEAR_WAIT = 10000
 const HANDSHAKE_INITIAL_TIMEOUT = 10000
 
 module.exports = class Server extends EventEmitter {
-  constructor (dht, opts = {}) {
+  constructor (sig, dht, opts = {}) {
     super()
 
     this.dht = dht
     this.target = null
-
+    this.sig = sig
+    this.keychain = dht.keychain
     this.closed = false
     this.firewall = opts.firewall || (() => false)
     this.holepunch = opts.holepunch || (() => true)
@@ -244,7 +245,6 @@ module.exports = class Server extends EventEmitter {
     }
 
     if (this._closing) return null
-
     try {
       hs.firewalled = await this.firewall(handshake.remotePublicKey, remotePayload, clientAddress)
     } catch (err) {
@@ -355,7 +355,8 @@ module.exports = class Server extends EventEmitter {
         secretStream: {},
         relayThrough: relayThrough
           ? { publicKey: relayThrough, token: hs.relayToken }
-          : null
+          : null,
+        mid: this.sig
       })
     } catch (err) {
       safetyCatch(err)
