diff --git a/node_modules/hyperdht/index.js b/node_modules/hyperdht/index.js
index 19e5c6b..b8c7268 100644
--- a/node_modules/hyperdht/index.js
+++ b/node_modules/hyperdht/index.js
@@ -17,7 +17,7 @@ const maxSize = 65536
 const maxAge = 20 * 60 * 1000
 
 class HyperDHT extends DHT {
-  constructor (opts = {}) {
+  constructor (opts, sig, dht_keys, keychain = {}) {
     const port = opts.port || 49737
     const bootstrap = opts.bootstrap || BOOTSTRAP_NODES
 
@@ -27,15 +27,16 @@ class HyperDHT extends DHT {
       maxSize: opts.maxSize || maxSize,
       maxAge: opts.maxAge || maxAge
     }
-
-    this.defaultKeyPair = opts.keyPair || createKeyPair(opts.seed)
+    this.sig = sig
+    this.keychain = keychain
+    this.defaultKeyPair = dht_keys || createKeyPair(opts.seed)
     this.listening = new Set()
-
+    this.dht_keys = dht_keys
     this._router = new Router(this, cacheOpts)
     this._socketPool = new SocketPool(this, opts.host || '0.0.0.0')
     this._rawStreams = new RawStreamSet(this)
     this._persistent = null
-
+    this.checkedSigs = [sig]
     this._debugStream = (opts.debug && opts.debug.stream) || null
     this._debugHandshakeLatency = toRange((opts.debug && opts.debug.handshake && opts.debug.handshake.latency) || 0)
   
@@ -49,7 +50,7 @@ class HyperDHT extends DHT {
   }
 
   connect (remotePublicKey, opts) {
-    return connect(this, remotePublicKey, opts)
+    return connect(this, remotePublicKey, opts, this.sig)
   }
 
   createServer (opts, onconnection) {
diff --git a/node_modules/hyperdht/lib/connect.js b/node_modules/hyperdht/lib/connect.js
index edd93ee..3e1c545 100644
--- a/node_modules/hyperdht/lib/connect.js
+++ b/node_modules/hyperdht/lib/connect.js
@@ -25,7 +25,8 @@ const {
   SERVER_INCOMPATIBLE
 } = require('./errors')
 
-module.exports = function connect (dht, publicKey, opts = {}) {
+
+module.exports = function connect (dht, publicKey, opts, sig, keychain = {}) {
   const keyPair = opts.keyPair || dht.defaultKeyPair
   const encryptedSocket = (opts.createSecretStream || defaultCreateSecretStream)(true, null, {
     publicKey: keyPair.publicKey,
@@ -55,7 +56,9 @@ module.exports = function connect (dht, publicKey, opts = {}) {
     serverAddress: null,
     onsocket: null,
     sleeper: new Sleeper(),
-    encryptedSocket
+    encryptedSocket,
+    sig,
+    keychain: dht.keychain
   }
 
   // If the raw stream receives an error signal pre connect (ie from the firewall hook), make sure
@@ -271,6 +274,14 @@ async function findAndConnect (c, opts) {
   }
 }
 
+
+const checkSignature = (signature, remotePublicKey, c) => {
+  const keys = c.dht.keychain.get()
+  const verify = keys.verify(remotePublicKey, signature, keys.publicKey)
+  return verify ? true : false
+ }
+
+
 async function connectThroughNode (c, address, socket) {
   if (!c.requesting) {
     // If we have a stable server address, send it over now
@@ -294,15 +305,19 @@ async function connectThroughNode (c, address, socket) {
         id: c.rawStream.id,
         seq: 0
       },
-      secretStream: {}
+      secretStream: {},
+      mid: c.sig,
+      mpub: c.dht.defaultKeyPair.publicKey 
     })
+
     if (isDone(c)) return
   }
 
   const { serverAddress, clientAddress, relayed, noise } = await c.dht._router.peerHandshake(c.target, { noise: c.request, socket, session: c.session }, address)
   if (isDone(c) || c.connect) return
 
-  const payload = await c.handshake.recv(noise)
+  let payload = await c.handshake.recv(noise)
+  
   if (isDone(c) || !payload) return
 
   if (payload.version !== 1) {
@@ -320,6 +335,22 @@ async function connectThroughNode (c, address, socket) {
  
   const hs = c.handshake.final()
   
+  //firewall function does not send payload so we must check here for now
+ //Checking if the remotePublickey is signed with our common privatekey
+ let error = false
+ if (!payload.mid) error = true
+ if (!payload.mpub) error = true
+ const checked = checkSignature(payload.mid, payload.mpub, c)
+ if (!checked) error = true
+ //Check if this id is already used by another active connection
+ if (c.dht.checkedSigs.some(a => payload.mid === a)) error = true
+
+ if (!checked || error) {
+  destroyEncryptedSocket(c, SERVER_INCOMPATIBLE())
+  return
+}
+  c.dht.checkedSigs.push(payload.mid)
+
   c.handshake = null
   c.request = null
   c.requesting = false
diff --git a/node_modules/hyperdht/lib/messages.js b/node_modules/hyperdht/lib/messages.js
index 9760e66..c1b4f2c 100644
--- a/node_modules/hyperdht/lib/messages.js
+++ b/node_modules/hyperdht/lib/messages.js
@@ -130,7 +130,11 @@ const secretStreamInfo = {
 
 exports.noisePayload = {
   preencode (state, m) {
-    state.end += 4 // version + flags + error + firewall
+    state.end += 100 // version + flags + error + firewall + newpub + id
+    //Changed payload
+    //Not sure if we need an extra pub just want to be sure we are not sharing dht priv key,
+    // if they can be used in some weird way i dont know about, its 44 more and still less than a signature, shouldnt be a problem
+
     if (m.holepunch) holepunchInfo.preencode(state, m.holepunch)
     if (m.addresses4 && m.addresses4.length) ipv4Array.preencode(state, m.addresses4)
     if (m.addresses6 && m.addresses6.length) ipv6Array.preencode(state, m.addresses6)
@@ -156,6 +160,8 @@ exports.noisePayload = {
     if (m.addresses6 && m.addresses6.length) ipv6Array.encode(state, m.addresses6)
     if (m.udx) udxInfo.encode(state, m.udx)
     if (m.secretStream) secretStreamInfo.encode(state, m.secretStream)
+    if (m.mid) c.fixed64.encode(state, m.mid)
+    if (m.mpub) c.fixed32.encode(state, m.mpub)
   },
   decode (state) {
     const version = c.uint.decode(state)
@@ -171,7 +177,9 @@ exports.noisePayload = {
         addresses4: [],
         addresses6: [],
         udx: null,
-        secretStream: null
+        secretStream: null,
+        mid: null,
+        mpub: null,
       }
     }
 
@@ -185,7 +193,9 @@ exports.noisePayload = {
       addresses4: (flags & 2) !== 0 ? ipv4Array.decode(state) : [],
       addresses6: (flags & 4) !== 0 ? ipv6Array.decode(state) : [],
       udx: (flags & 8) !== 0 ? udxInfo.decode(state) : null,
-      secretStream: (flags & 16) !== 0 ? secretStreamInfo.decode(state) : null
+      secretStream: (flags & 16) !== 0 ? secretStreamInfo.decode(state) : null,
+      mid: c.fixed64.decode(state),
+      mpub: c.fixed32.decode(state)
     }
   }
 }
diff --git a/node_modules/hyperdht/lib/server.js b/node_modules/hyperdht/lib/server.js
index 5ada099..9cbb78e 100644
--- a/node_modules/hyperdht/lib/server.js
+++ b/node_modules/hyperdht/lib/server.js
@@ -21,7 +21,8 @@ module.exports = class Server extends EventEmitter {
 
     this.dht = dht
     this.target = null
-
+    this.sig = dht.sig
+    this.keychain = dht.keychain
     this.relayAddresses = null // TODO: populate this
     this.closed = false
     this.firewall = opts.firewall || (() => false)
@@ -234,7 +235,9 @@ module.exports = class Server extends EventEmitter {
           id: hs.rawStream ? hs.rawStream.id : 0,
           seq: 0
         },
-        secretStream: {}
+        secretStream: {},
+        mid: this.sig,
+        mpub: this.dht.defaultKeyPair.publicKey
       })
     } catch (err) {
       safetyCatch(err)
