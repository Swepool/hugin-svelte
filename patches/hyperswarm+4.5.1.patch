diff --git a/node_modules/hyperswarm/index.js b/node_modules/hyperswarm/index.js
index ad0de06..4272c6f 100644
--- a/node_modules/hyperswarm/index.js
+++ b/node_modules/hyperswarm/index.js
@@ -18,7 +18,7 @@ const ERR_DESTROYED = 'Swarm has been destroyed'
 const ERR_DUPLICATE = 'Duplicate connection'
 
 module.exports = class Hyperswarm extends EventEmitter {
-  constructor (opts = {}) {
+  constructor (opts, sig, priv = {}) {
     super()
     const {
       seed,
@@ -34,7 +34,7 @@ module.exports = class Hyperswarm extends EventEmitter {
     this.dht = opts.dht || new DHT({
       bootstrap: opts.bootstrap,
       debug: opts.debug
-    })
+    }, sig, priv)
     this.server = this.dht.createServer({
       firewall: this._handleFirewall.bind(this)
     }, this._handleServerConnection.bind(this))
@@ -65,7 +65,7 @@ module.exports = class Hyperswarm extends EventEmitter {
     this._clientConnections = 0
     this._serverConnections = 0
     this._firewall = firewall
-
+    this.sig = sig
     this.dht.on('network-change', this._handleNetworkChange.bind(this))
   }
 
@@ -139,6 +139,7 @@ module.exports = class Hyperswarm extends EventEmitter {
 
     // TODO: Support async firewalling at some point.
     if (this._handleFirewall(peerInfo.publicKey, null)) {
+      console.log("This firewall bann")
       peerInfo.ban(true)
       this._flushMaybe(peerInfo)
       return
@@ -212,8 +213,10 @@ module.exports = class Hyperswarm extends EventEmitter {
 
     const peerInfo = this.peers.get(b4a.toString(remotePublicKey, 'hex'))
     if (peerInfo && peerInfo.banned) return true
+    let server = true
+    if (payload === null) server = false
 
-    return this._firewall(remotePublicKey, payload)
+    return this._firewall(remotePublicKey, payload, server)
   }
 
   _handleServerConnectionSwap (existing, conn) {
